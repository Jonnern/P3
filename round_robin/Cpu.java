package round_robin;

import java.util.LinkedList;

/**
 * This class implements functionality associated with
 * the CPU unit of the simulated system.
 */
public class Cpu {
    /**
     * Creates a new CPU with the given parameters.
     * @param cpuQueue		The CPU queue to be used.
     * @param maxCpuTime	The Round Robin time quant to be used.
     * @param statistics	A reference to the statistics collector.
     * @param activeProcess The active process in the CPU
     */

    private LinkedList<Process> cpuQueue = new LinkedList<>();
    private long maxCpuTime;
    private Statistics statistics;
    private Process activeProcess = null;

    public Cpu(LinkedList<Process> cpuQueue, long maxCpuTime, Statistics statistics) {
        this.cpuQueue = cpuQueue;
        this.maxCpuTime = maxCpuTime;
        this.statistics = statistics;
    }

    /**
     * Adds a process to the CPU queue, and activates (switches in) the first process
     * in the CPU queue if the CPU is idle.
     * @param p		The process to be added to the CPU queue.
     * @param clock	The global time.
     * @return		The event causing the process that was activated to leave the CPU,
     *				or null	if no process was activated.
     */
    public Event insertProcess(Process p, long clock) {
        // TODO: insertProcess, correct?
        cpuQueue.add(p);

        // Process left memory queue
        p.leftMemoryQueue(clock);

        // Switching process if the CPU is idle
        if(getActiveProcess() == null){
            switchProcess(clock);
            return new Event(Event.NEW_PROCESS, clock);
        }
        return null;
    }

    /**
     * Activates (switches in) the first process in the CPU queue, if the queue is non-empty.
     * The process that was using the CPU, if any, is switched out and added to the back of
     * the CPU queue, in accordance with the Round Robin algorithm.
     * @param clock	The global time.
     * @return		The event causing the process that was activated to leave the CPU,
     *				or null	if no process was activated.
     */
    public Event switchProcess(long clock) {
        // TODO:  switchProcess, correct?
        if(!cpuQueue.isEmpty()){
            // Active process is leaving CPU
            activeProcessLeft(clock);

            // First process in queue is activated
            activeProcess = cpuQueue.remove(0);
            activeProcess.leftReadyQueue(clock);

            return new Event(Event.SWITCH_PROCESS, clock);
        }
        return null;
    }

    /**
     * Called when the active process left the CPU (for example to perform I/O),
     * and a new process needs to be switched in.
     * @return	The event generated by the process switch, or null if no new
     *			process was switched in.
     */
    public Event activeProcessLeft(long clock) {
        // TODO: activeProcessLeft, correct?
        activeProcess.leftCpu(clock);
        cpuQueue.add(activeProcess);

        return switchProcess(clock);
    }

    /**
     * Returns the process currently using the CPU.
     * @return	The process currently using the CPU.
     */
    public Process getActiveProcess() {
        return activeProcess;
    }

    /**
     * This method is called when a discrete amount of time has passed.
     * @param timePassed	The amount of time that has passed since the last call to this method.
     */
    public void timePassed(long timePassed) {
        // TODO: timePassed, correct? Maybe need more

        // Updating statistics if the current queue is longer than the historical largest
        if(cpuQueue.size() > statistics.cpuQueueLargestLength){
            statistics.cpuQueueLargestLength = cpuQueue.size();
        }

        // Total CPU time has increased if the CPU is processing
        if(activeProcess != null){
            statistics.totalBusyCpuTime += timePassed;
        }
    }
}
